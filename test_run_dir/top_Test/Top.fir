;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 10:26]
    reg <= io.input @[pc.scala 11:9]
    node _io_pc4_T = add(reg, UInt<3>("h04")) @[pc.scala 12:23]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[pc.scala 12:23]
    io.pc4 <= _io_pc4_T_1 @[pc.scala 12:16]
    io.pc <= reg @[pc.scala 13:15]
    
  module ALU_ : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip aluc : UInt<5>, output : SInt<32>}
    
    io.output <= asSInt(UInt<1>("h00")) @[alu.scala 48:14]
    node _T = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:22]
    node _T_1 = eq(io.aluc, UInt<1>("h00")) @[alu.scala 50:44]
    node _T_2 = or(_T, _T_1) @[alu.scala 50:34]
    when _T_2 : @[alu.scala 50:58]
      node _io_output_T = add(io.in_A, io.in_B) @[alu.scala 51:38]
      node _io_output_T_1 = tail(_io_output_T, 1) @[alu.scala 51:38]
      node _io_output_T_2 = asSInt(_io_output_T_1) @[alu.scala 51:38]
      io.output <= _io_output_T_2 @[alu.scala 51:27]
      skip @[alu.scala 50:58]
    else : @[alu.scala 52:64]
      node _T_3 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:28]
      node _T_4 = eq(io.aluc, UInt<1>("h01")) @[alu.scala 52:50]
      node _T_5 = or(_T_3, _T_4) @[alu.scala 52:40]
      when _T_5 : @[alu.scala 52:64]
        node _io_output_T_3 = bits(io.in_B, 4, 0) @[alu.scala 53:48]
        node _io_output_T_4 = dshl(io.in_A, _io_output_T_3) @[alu.scala 53:38]
        io.output <= _io_output_T_4 @[alu.scala 53:26]
        skip @[alu.scala 52:64]
      else : @[alu.scala 54:65]
        node _T_6 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:28]
        node _T_7 = eq(io.aluc, UInt<2>("h02")) @[alu.scala 54:51]
        node _T_8 = or(_T_6, _T_7) @[alu.scala 54:40]
        when _T_8 : @[alu.scala 54:65]
          node _T_9 = lt(io.in_A, io.in_B) @[alu.scala 55:30]
          when _T_9 : @[alu.scala 55:40]
            io.output <= asSInt(UInt<2>("h01")) @[alu.scala 56:35]
            skip @[alu.scala 55:40]
          else : @[alu.scala 57:28]
            io.output <= asSInt(UInt<1>("h00")) @[alu.scala 58:35]
            skip @[alu.scala 57:28]
          skip @[alu.scala 54:65]
        else : @[alu.scala 60:65]
          node _T_10 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:28]
          node _T_11 = eq(io.aluc, UInt<2>("h03")) @[alu.scala 60:51]
          node _T_12 = or(_T_10, _T_11) @[alu.scala 60:41]
          when _T_12 : @[alu.scala 60:65]
            node Ua = asUInt(io.in_A) @[alu.scala 61:34]
            node Ub = asUInt(io.in_B) @[alu.scala 62:34]
            node _T_13 = lt(Ua, Ub) @[alu.scala 63:25]
            when _T_13 : @[alu.scala 63:30]
              io.output <= asSInt(UInt<2>("h01")) @[alu.scala 64:35]
              skip @[alu.scala 63:30]
            else : @[alu.scala 65:28]
              io.output <= asSInt(UInt<1>("h00")) @[alu.scala 66:35]
              skip @[alu.scala 65:28]
            skip @[alu.scala 60:65]
          else : @[alu.scala 68:64]
            node _T_14 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:28]
            node _T_15 = eq(io.aluc, UInt<3>("h04")) @[alu.scala 68:50]
            node _T_16 = or(_T_14, _T_15) @[alu.scala 68:40]
            when _T_16 : @[alu.scala 68:64]
              node _io_output_T_5 = xor(io.in_A, io.in_B) @[alu.scala 69:38]
              node _io_output_T_6 = asSInt(_io_output_T_5) @[alu.scala 69:38]
              io.output <= _io_output_T_6 @[alu.scala 69:27]
              skip @[alu.scala 68:64]
            else : @[alu.scala 70:65]
              node _T_17 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:28]
              node _T_18 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 70:51]
              node _T_19 = or(_T_17, _T_18) @[alu.scala 70:40]
              when _T_19 : @[alu.scala 70:65]
                node _shift_T = asUInt(io.in_A) @[alu.scala 72:37]
                node _shift_T_1 = bits(io.in_B, 4, 0) @[alu.scala 72:55]
                node shift = dshr(_shift_T, _shift_T_1) @[alu.scala 72:44]
                node _io_output_T_7 = asSInt(shift) @[alu.scala 73:36]
                io.output <= _io_output_T_7 @[alu.scala 73:27]
                skip @[alu.scala 70:65]
              else : @[alu.scala 74:63]
                node _T_20 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:28]
                node _T_21 = eq(io.aluc, UInt<3>("h06")) @[alu.scala 74:50]
                node _T_22 = or(_T_20, _T_21) @[alu.scala 74:39]
                when _T_22 : @[alu.scala 74:63]
                  node _io_output_T_8 = or(io.in_A, io.in_B) @[alu.scala 75:38]
                  node _io_output_T_9 = asSInt(_io_output_T_8) @[alu.scala 75:38]
                  io.output <= _io_output_T_9 @[alu.scala 75:27]
                  skip @[alu.scala 74:63]
                else : @[alu.scala 76:65]
                  node _T_23 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:28]
                  node _T_24 = eq(io.aluc, UInt<3>("h07")) @[alu.scala 76:51]
                  node _T_25 = or(_T_23, _T_24) @[alu.scala 76:40]
                  when _T_25 : @[alu.scala 76:65]
                    node _io_output_T_10 = and(io.in_A, io.in_B) @[alu.scala 77:38]
                    node _io_output_T_11 = asSInt(_io_output_T_10) @[alu.scala 77:38]
                    io.output <= _io_output_T_11 @[alu.scala 77:27]
                    skip @[alu.scala 76:65]
                  else : @[alu.scala 78:40]
                    node _T_26 = eq(io.aluc, UInt<4>("h08")) @[alu.scala 78:28]
                    when _T_26 : @[alu.scala 78:40]
                      node _io_output_T_12 = sub(io.in_A, io.in_B) @[alu.scala 79:38]
                      node _io_output_T_13 = tail(_io_output_T_12, 1) @[alu.scala 79:38]
                      node _io_output_T_14 = asSInt(_io_output_T_13) @[alu.scala 79:38]
                      io.output <= _io_output_T_14 @[alu.scala 79:27]
                      skip @[alu.scala 78:40]
                    else : @[alu.scala 80:64]
                      node _T_27 = eq(io.aluc, UInt<4>("h0d")) @[alu.scala 80:28]
                      node _T_28 = eq(io.aluc, UInt<3>("h05")) @[alu.scala 80:51]
                      node _T_29 = or(_T_27, _T_28) @[alu.scala 80:40]
                      when _T_29 : @[alu.scala 80:64]
                        node _io_output_T_15 = bits(io.in_B, 4, 0) @[alu.scala 81:49]
                        node _io_output_T_16 = dshr(io.in_A, _io_output_T_15) @[alu.scala 81:39]
                        io.output <= _io_output_T_16 @[alu.scala 81:27]
                        skip @[alu.scala 80:64]
                      else : @[alu.scala 82:43]
                        node _T_30 = eq(io.aluc, UInt<5>("h01f")) @[alu.scala 82:28]
                        when _T_30 : @[alu.scala 82:43]
                          io.output <= io.in_A @[alu.scala 83:27]
                          skip @[alu.scala 82:43]
    
  module alucontrol : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, aluc : UInt<5>}
    
    io.aluc <= UInt<1>("h00") @[alucontrol.scala 15:17]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[alucontrol.scala 17:24]
    when _T : @[alucontrol.scala 17:37]
      node io_aluc_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_aluc_T = cat(io_aluc_hi, io.func3) @[Cat.scala 30:58]
      io.aluc <= _io_aluc_T @[alucontrol.scala 17:46]
      skip @[alucontrol.scala 17:37]
    else : @[alucontrol.scala 18:41]
      node _T_1 = eq(io.aluOp, UInt<1>("h01")) @[alucontrol.scala 18:27]
      when _T_1 : @[alucontrol.scala 18:41]
        node _io_aluc_T_1 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
        io.aluc <= _io_aluc_T_1 @[alucontrol.scala 18:50]
        skip @[alucontrol.scala 18:41]
      else : @[alucontrol.scala 19:64]
        node _T_2 = eq(io.aluOp, UInt<3>("h05")) @[alucontrol.scala 19:26]
        node _T_3 = eq(io.aluOp, UInt<3>("h04")) @[alucontrol.scala 19:51]
        node _T_4 = or(_T_2, _T_3) @[alucontrol.scala 19:39]
        when _T_4 : @[alucontrol.scala 19:64]
          io.aluc <= UInt<1>("h00") @[alucontrol.scala 19:73]
          skip @[alucontrol.scala 19:64]
        else : @[alucontrol.scala 20:40]
          node _T_5 = eq(io.aluOp, UInt<2>("h03")) @[alucontrol.scala 20:27]
          when _T_5 : @[alucontrol.scala 20:40]
            io.aluc <= UInt<5>("h01f") @[alucontrol.scala 20:49]
            skip @[alucontrol.scala 20:40]
          else : @[alucontrol.scala 21:40]
            node _T_6 = eq(io.aluOp, UInt<2>("h02")) @[alucontrol.scala 21:27]
            when _T_6 : @[alucontrol.scala 21:40]
              node _io_aluc_T_2 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
              io.aluc <= _io_aluc_T_2 @[alucontrol.scala 21:49]
              skip @[alucontrol.scala 21:40]
            else : @[alucontrol.scala 22:39]
              node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[alucontrol.scala 22:26]
              when _T_7 : @[alucontrol.scala 22:39]
                io.aluc <= UInt<1>("h00") @[alucontrol.scala 22:48]
                skip @[alucontrol.scala 22:39]
    
  module controldec : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, Mem2Reg : UInt<1>, opAsel : UInt<2>, opBsel : UInt<1>, Ex_sel : UInt<2>, nextPCsel : UInt<2>, aluop : UInt<3>}
    
    io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 20:17]
    io.Branch <= UInt<1>("h00") @[controldecoder.scala 21:15]
    io.MemRead <= UInt<1>("h00") @[controldecoder.scala 22:16]
    io.RegWrite <= UInt<1>("h00") @[controldecoder.scala 23:17]
    io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 24:16]
    io.opAsel <= UInt<1>("h00") @[controldecoder.scala 25:15]
    io.opBsel <= UInt<1>("h00") @[controldecoder.scala 26:15]
    io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 27:15]
    io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 28:18]
    io.aluop <= UInt<3>("h07") @[controldecoder.scala 29:14]
    node _T = eq(UInt<6>("h033"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 32:25]
      io.Branch <= UInt<1>("h00") @[controldecoder.scala 33:24]
      io.MemRead <= UInt<1>("h00") @[controldecoder.scala 34:25]
      io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 35:26]
      io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 36:25]
      io.opAsel <= UInt<1>("h00") @[controldecoder.scala 37:24]
      io.opBsel <= UInt<1>("h00") @[controldecoder.scala 38:24]
      io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 39:24]
      io.aluop <= UInt<1>("h00") @[controldecoder.scala 40:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 44:26]
        io.Branch <= UInt<1>("h00") @[controldecoder.scala 45:24]
        io.MemRead <= UInt<1>("h00") @[controldecoder.scala 46:25]
        io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 47:26]
        io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 48:25]
        io.opAsel <= UInt<1>("h00") @[controldecoder.scala 49:24]
        io.opBsel <= UInt<1>("h01") @[controldecoder.scala 50:24]
        io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 51:24]
        io.aluop <= UInt<1>("h01") @[controldecoder.scala 52:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.MemWrite <= UInt<1>("h01") @[controldecoder.scala 55:26]
          io.Branch <= UInt<1>("h00") @[controldecoder.scala 56:24]
          io.MemRead <= UInt<1>("h00") @[controldecoder.scala 57:25]
          io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 58:26]
          io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 59:25]
          io.opAsel <= UInt<1>("h00") @[controldecoder.scala 60:24]
          io.opBsel <= UInt<1>("h01") @[controldecoder.scala 61:24]
          io.Ex_sel <= UInt<1>("h01") @[controldecoder.scala 62:24]
          io.aluop <= UInt<3>("h05") @[controldecoder.scala 63:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 66:26]
            io.Branch <= UInt<1>("h00") @[controldecoder.scala 67:24]
            io.MemRead <= UInt<1>("h01") @[controldecoder.scala 68:25]
            io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 69:26]
            io.Mem2Reg <= UInt<1>("h01") @[controldecoder.scala 70:25]
            io.opAsel <= UInt<1>("h00") @[controldecoder.scala 71:24]
            io.opBsel <= UInt<1>("h01") @[controldecoder.scala 72:24]
            io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 73:24]
            io.aluop <= UInt<3>("h04") @[controldecoder.scala 74:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 78:26]
              io.Branch <= UInt<1>("h01") @[controldecoder.scala 79:24]
              io.MemRead <= UInt<1>("h00") @[controldecoder.scala 80:25]
              io.RegWrite <= UInt<1>("h00") @[controldecoder.scala 81:26]
              io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 82:25]
              io.opAsel <= UInt<1>("h00") @[controldecoder.scala 83:24]
              io.opBsel <= UInt<1>("h00") @[controldecoder.scala 84:24]
              io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 85:24]
              io.nextPCsel <= UInt<1>("h01") @[controldecoder.scala 86:26]
              io.aluop <= UInt<2>("h02") @[controldecoder.scala 87:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 90:26]
                io.Branch <= UInt<1>("h00") @[controldecoder.scala 91:24]
                io.MemRead <= UInt<1>("h00") @[controldecoder.scala 92:25]
                io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 93:26]
                io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 94:25]
                io.opAsel <= UInt<1>("h01") @[controldecoder.scala 95:24]
                io.opBsel <= UInt<1>("h00") @[controldecoder.scala 96:24]
                io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 97:24]
                io.nextPCsel <= UInt<2>("h02") @[controldecoder.scala 98:26]
                io.aluop <= UInt<2>("h03") @[controldecoder.scala 99:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 102:26]
                  io.Branch <= UInt<1>("h00") @[controldecoder.scala 103:24]
                  io.MemRead <= UInt<1>("h00") @[controldecoder.scala 104:25]
                  io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 105:26]
                  io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 106:25]
                  io.opAsel <= UInt<1>("h01") @[controldecoder.scala 107:24]
                  io.opBsel <= UInt<1>("h01") @[controldecoder.scala 108:24]
                  io.Ex_sel <= UInt<1>("h00") @[controldecoder.scala 109:24]
                  io.nextPCsel <= UInt<2>("h03") @[controldecoder.scala 110:26]
                  io.aluop <= UInt<2>("h03") @[controldecoder.scala 111:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.MemWrite <= UInt<1>("h00") @[controldecoder.scala 114:26]
                    io.Branch <= UInt<1>("h00") @[controldecoder.scala 115:24]
                    io.MemRead <= UInt<1>("h00") @[controldecoder.scala 116:25]
                    io.RegWrite <= UInt<1>("h01") @[controldecoder.scala 117:26]
                    io.Mem2Reg <= UInt<1>("h00") @[controldecoder.scala 118:25]
                    io.opAsel <= UInt<2>("h02") @[controldecoder.scala 119:24]
                    io.opBsel <= UInt<1>("h01") @[controldecoder.scala 120:24]
                    io.Ex_sel <= UInt<2>("h02") @[controldecoder.scala 121:24]
                    io.nextPCsel <= UInt<1>("h00") @[controldecoder.scala 122:26]
                    io.aluop <= UInt<3>("h06") @[controldecoder.scala 123:22]
                    skip @[Conditional.scala 39:67]
    
  module datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[datamemory.scala 14:22]
    node _T = eq(io.MemWrite, UInt<1>("h01")) @[datamemory.scala 15:27]
    when _T : @[datamemory.scala 15:35]
      write mport MPORT = mem[io.Addr], clock
      MPORT <= io.Data
      skip @[datamemory.scala 15:35]
    node _T_1 = eq(io.MemRead, UInt<1>("h01")) @[datamemory.scala 18:25]
    when _T_1 : @[datamemory.scala 18:33]
      read mport io_out_MPORT = mem[io.Addr], clock @[datamemory.scala 19:35]
      io.out <= io_out_MPORT @[datamemory.scala 19:24]
      skip @[datamemory.scala 18:33]
    else : @[datamemory.scala 21:20]
      io.out <= asSInt(UInt<1>("h00")) @[datamemory.scala 21:28]
      skip @[datamemory.scala 21:20]
    
  module ImmdValGen1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node s_imm__hi = bits(io.instruction, 31, 25) @[immgen.scala 19:41]
    node s_imm__lo = bits(io.instruction, 11, 7) @[immgen.scala 19:63]
    node s_imm_ = cat(s_imm__hi, s_imm__lo) @[Cat.scala 30:58]
    node _io_s_imm_T = bits(s_imm_, 11, 11) @[immgen.scala 20:40]
    node _io_s_imm_T_1 = bits(_io_s_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_s_imm_hi = mux(_io_s_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_s_imm_T_2 = cat(io_s_imm_hi, s_imm_) @[Cat.scala 30:58]
    node _io_s_imm_T_3 = asSInt(_io_s_imm_T_2) @[immgen.scala 20:55]
    io.s_imm <= _io_s_imm_T_3 @[immgen.scala 20:18]
    node sb_imm__hi_hi_hi = bits(io.instruction, 31, 31) @[immgen.scala 22:42]
    node sb_imm__hi_hi_lo = bits(io.instruction, 7, 7) @[immgen.scala 22:61]
    node sb_imm__hi_lo = bits(io.instruction, 30, 25) @[immgen.scala 22:79]
    node sb_imm__lo_hi = bits(io.instruction, 11, 8) @[immgen.scala 22:101]
    node sb_imm__lo = cat(sb_imm__lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sb_imm__hi_hi = cat(sb_imm__hi_hi_hi, sb_imm__hi_hi_lo) @[Cat.scala 30:58]
    node sb_imm__hi = cat(sb_imm__hi_hi, sb_imm__hi_lo) @[Cat.scala 30:58]
    node sb_imm_ = cat(sb_imm__hi, sb_imm__lo) @[Cat.scala 30:58]
    node _io_sb_imm_T = bits(sb_imm_, 12, 12) @[immgen.scala 23:43]
    node _io_sb_imm_T_1 = bits(_io_sb_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_sb_imm_hi = mux(_io_sb_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_sb_imm_T_2 = cat(io_sb_imm_hi, sb_imm_) @[Cat.scala 30:58]
    node _io_sb_imm_T_3 = add(_io_sb_imm_T_2, io.pc) @[immgen.scala 23:59]
    node _io_sb_imm_T_4 = tail(_io_sb_imm_T_3, 1) @[immgen.scala 23:59]
    node _io_sb_imm_T_5 = asSInt(_io_sb_imm_T_4) @[immgen.scala 23:68]
    io.sb_imm <= _io_sb_imm_T_5 @[immgen.scala 23:19]
    node uj_imm__hi_hi_hi = bits(io.instruction, 31, 31) @[immgen.scala 25:42]
    node uj_imm__hi_hi_lo = bits(io.instruction, 19, 12) @[immgen.scala 25:61]
    node uj_imm__hi_lo = bits(io.instruction, 20, 20) @[immgen.scala 25:83]
    node uj_imm__lo_hi = bits(io.instruction, 30, 21) @[immgen.scala 25:102]
    node uj_imm__lo = cat(uj_imm__lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node uj_imm__hi_hi = cat(uj_imm__hi_hi_hi, uj_imm__hi_hi_lo) @[Cat.scala 30:58]
    node uj_imm__hi = cat(uj_imm__hi_hi, uj_imm__hi_lo) @[Cat.scala 30:58]
    node uj_imm_ = cat(uj_imm__hi, uj_imm__lo) @[Cat.scala 30:58]
    node _io_uj_imm_T = bits(uj_imm_, 20, 20) @[immgen.scala 26:43]
    node _io_uj_imm_T_1 = bits(_io_uj_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_uj_imm_hi = mux(_io_uj_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_uj_imm_T_2 = cat(io_uj_imm_hi, uj_imm_) @[Cat.scala 30:58]
    node _io_uj_imm_T_3 = add(_io_uj_imm_T_2, io.pc) @[immgen.scala 26:59]
    node _io_uj_imm_T_4 = tail(_io_uj_imm_T_3, 1) @[immgen.scala 26:59]
    node _io_uj_imm_T_5 = asSInt(_io_uj_imm_T_4) @[immgen.scala 26:68]
    io.uj_imm <= _io_uj_imm_T_5 @[immgen.scala 26:19]
    node _io_u_imm_T = bits(io.instruction, 31, 31) @[immgen.scala 28:50]
    node _io_u_imm_T_1 = bits(_io_u_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_u_imm_hi = mux(_io_u_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node io_u_imm_lo = bits(io.instruction, 31, 12) @[immgen.scala 28:70]
    node _io_u_imm_T_2 = cat(io_u_imm_hi, io_u_imm_lo) @[Cat.scala 30:58]
    node _io_u_imm_T_3 = shl(_io_u_imm_T_2, 12) @[immgen.scala 28:80]
    node _io_u_imm_T_4 = add(_io_u_imm_T_3, io.pc) @[immgen.scala 28:86]
    node _io_u_imm_T_5 = tail(_io_u_imm_T_4, 1) @[immgen.scala 28:86]
    node _io_u_imm_T_6 = asSInt(_io_u_imm_T_5) @[immgen.scala 28:94]
    io.u_imm <= _io_u_imm_T_6 @[immgen.scala 28:18]
    node _io_i_imm_T = bits(io.instruction, 31, 31) @[immgen.scala 30:48]
    node _io_i_imm_T_1 = bits(_io_i_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_i_imm_hi = mux(_io_i_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_i_imm_lo = bits(io.instruction, 31, 20) @[immgen.scala 30:68]
    node _io_i_imm_T_2 = cat(io_i_imm_hi, io_i_imm_lo) @[Cat.scala 30:58]
    node _io_i_imm_T_3 = asSInt(_io_i_imm_T_2) @[immgen.scala 30:78]
    io.i_imm <= _io_i_imm_T_3 @[immgen.scala 30:18]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, inst : UInt<32>}
    
    cmem imemm : UInt<32>[1024] @[instmemory.scala 13:17]
    read mport io_inst_MPORT = imemm[io.addr], clock @[instmemory.scala 16:22]
    io.inst <= io_inst_MPORT @[instmemory.scala 16:9]
    
  module jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : SInt<32>, flip imm : SInt<32>, out : SInt<32>}
    
    node _a_T = add(io.rs1, io.imm) @[jalr.scala 11:24]
    node _a_T_1 = tail(_a_T, 1) @[jalr.scala 11:24]
    node a = asSInt(_a_T_1) @[jalr.scala 11:24]
    node _io_out_T = and(a, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 12:21]
    node _io_out_T_1 = asSInt(_io_out_T) @[jalr.scala 12:21]
    io.out <= _io_out_T_1 @[jalr.scala 12:16]
    
  module regfile : 
    input clock : Clock
    input reset : Reset
    output io : {flip RegWrite : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _register_WIRE : SInt<32>[32] @[registerfile.scala 16:39]
    _register_WIRE[0] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[1] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[2] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[3] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[4] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[5] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[6] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[7] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[8] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[9] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[10] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[11] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[12] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[13] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[14] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[15] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[16] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[17] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[18] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[19] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[20] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[21] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[22] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[23] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[24] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[25] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[26] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[27] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[28] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[29] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[30] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    _register_WIRE[31] <= asSInt(UInt<32>("h00")) @[registerfile.scala 16:39]
    reg register : SInt<32>[32], clock with : (reset => (reset, _register_WIRE)) @[registerfile.scala 16:31]
    register[0] <= asSInt(UInt<1>("h00")) @[registerfile.scala 17:21]
    io.rdata1 <= register[io.rs1] @[registerfile.scala 18:19]
    io.rdata2 <= register[io.rs2] @[registerfile.scala 19:19]
    node _T = eq(io.RegWrite, UInt<1>("h01")) @[registerfile.scala 20:26]
    when _T : @[registerfile.scala 20:34]
      node _T_1 = neq(io.rd, UInt<1>("h00")) @[registerfile.scala 21:28]
      when _T_1 : @[registerfile.scala 21:43]
        register[io.rd] <= io.WriteData @[registerfile.scala 21:60]
        skip @[registerfile.scala 21:43]
      else : @[registerfile.scala 22:28]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[registerfile.scala 22:45]
        skip @[registerfile.scala 22:28]
      skip @[registerfile.scala 20:34]
    
  module IF_ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, flip pc4 : UInt<32>, flip ins : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 21:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 22:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 23:30]
    reg_pc <= io.pc @[IF_ID.scala 25:16]
    reg_pc4 <= io.pc4 @[IF_ID.scala 26:17]
    reg_ins <= io.ins @[IF_ID.scala 27:17]
    io.pc_out <= reg_pc @[IF_ID.scala 28:19]
    io.pc4_out <= reg_pc4 @[IF_ID.scala 29:20]
    io.ins_out <= reg_ins @[IF_ID.scala 30:20]
    
  module ID_EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, flip pc4 : UInt<32>, flip MemWrite : UInt<1>, flip Branch : UInt<1>, flip MemRead : UInt<1>, flip RegWrite : UInt<1>, flip MemtoReg : UInt<1>, flip AluOp : UInt<3>, flip OpA_s : UInt<2>, flip OpB_s : UInt<1>, flip NextPc : UInt<2>, flip imm : SInt<32>, flip func3 : UInt<3>, flip func7 : UInt<1>, flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip rs1_s : UInt<5>, flip rs2_s : UInt<5>, flip rd : UInt<5>, pc_out : UInt<32>, pc4_out : UInt<32>, MemWrite_out : UInt<1>, Branch_out : UInt<1>, MemRead_out : UInt<1>, RegWrite_out : UInt<1>, MemtoReg_out : UInt<1>, AluOp_out : UInt<3>, OpB_s_out : UInt<1>, OpA_s_out : UInt<2>, NextPc_out : UInt<2>, imm_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, rs1_out : SInt<32>, rs2_out : SInt<32>, rs1_s_out : UInt<5>, rs2_s_out : UInt<5>, rd_out : UInt<5>}
    
    reg pc_r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 61:27]
    reg pc4_r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 62:28]
    reg inst_r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 63:29]
    pc_r <= io.pc @[ID_EX.scala 64:14]
    io.pc_out <= pc_r @[ID_EX.scala 65:19]
    pc4_r <= io.pc4 @[ID_EX.scala 66:15]
    io.pc4_out <= pc4_r @[ID_EX.scala 67:20]
    reg imm_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 73:28]
    imm_r <= io.imm @[ID_EX.scala 74:15]
    io.imm_out <= imm_r @[ID_EX.scala 75:20]
    reg func3_r : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 89:30]
    func3_r <= io.func3 @[ID_EX.scala 90:17]
    io.func3_out <= func3_r @[ID_EX.scala 91:22]
    reg func7_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 92:30]
    func7_r <= io.func7 @[ID_EX.scala 93:17]
    io.func7_out <= func7_r @[ID_EX.scala 94:22]
    reg rs1_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 96:28]
    rs1_r <= io.rs1 @[ID_EX.scala 97:15]
    io.rs1_out <= rs1_r @[ID_EX.scala 98:20]
    reg rs2_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 99:28]
    rs2_r <= io.rs2 @[ID_EX.scala 100:15]
    io.rs2_out <= rs2_r @[ID_EX.scala 101:20]
    reg rs1s_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 102:29]
    rs1s_r <= io.rs1_s @[ID_EX.scala 103:16]
    io.rs1_s_out <= rs1s_r @[ID_EX.scala 104:22]
    reg rs2s_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 105:29]
    rs2s_r <= io.rs2_s @[ID_EX.scala 106:16]
    io.rs2_s_out <= rs2s_r @[ID_EX.scala 107:22]
    reg rd_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 108:27]
    rd_r <= io.rd @[ID_EX.scala 109:14]
    io.rd_out <= rd_r @[ID_EX.scala 110:19]
    reg MemWrite_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 112:33]
    reg Branch_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 113:31]
    reg MemRead_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 114:32]
    reg RegWrite_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 115:33]
    reg MemtoReg_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 116:33]
    reg AluOp_r : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 117:30]
    reg OpA_s_r : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 118:30]
    reg OpB_s_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 119:30]
    reg NextPc_r : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 120:31]
    MemWrite_r <= io.MemWrite @[ID_EX.scala 122:20]
    io.MemWrite_out <= MemWrite_r @[ID_EX.scala 123:25]
    Branch_r <= io.Branch @[ID_EX.scala 124:18]
    io.Branch_out <= Branch_r @[ID_EX.scala 125:23]
    MemRead_r <= io.MemRead @[ID_EX.scala 126:19]
    io.MemRead_out <= MemRead_r @[ID_EX.scala 127:24]
    RegWrite_r <= io.RegWrite @[ID_EX.scala 128:20]
    io.RegWrite_out <= RegWrite_r @[ID_EX.scala 129:25]
    MemtoReg_r <= io.MemtoReg @[ID_EX.scala 130:20]
    io.MemtoReg_out <= MemtoReg_r @[ID_EX.scala 131:25]
    AluOp_r <= io.AluOp @[ID_EX.scala 132:17]
    io.AluOp_out <= AluOp_r @[ID_EX.scala 133:22]
    OpA_s_r <= io.OpA_s @[ID_EX.scala 134:17]
    io.OpA_s_out <= OpA_s_r @[ID_EX.scala 135:22]
    OpB_s_r <= io.OpB_s @[ID_EX.scala 136:17]
    io.OpB_s_out <= OpB_s_r @[ID_EX.scala 137:22]
    NextPc_r <= io.NextPc @[ID_EX.scala 138:18]
    io.NextPc_out <= NextPc_r @[ID_EX.scala 139:23]
    
  module EX_MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip MemWrite : UInt<1>, flip MemRead : UInt<1>, flip RegWrite : UInt<1>, flip MemtoReg : UInt<1>, flip rs2 : SInt<32>, flip alu : SInt<32>, flip rd : UInt<5>, rs2_out : SInt<32>, alu_out : SInt<32>, rd_out : UInt<5>, MemWrite_out : UInt<1>, MemRead_out : UInt<1>, RegWrite_out : UInt<1>, MemtoReg_out : UInt<1>}
    
    reg MemWrite_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 26:29]
    reg MemRead_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 27:32]
    reg RegWrite_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 28:33]
    reg MemtoReg_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 29:33]
    reg rs2_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 30:24]
    reg alu_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 31:24]
    reg rd_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 32:23]
    MemWrite_r <= io.MemWrite @[EX_MEM.scala 33:20]
    io.MemWrite_out <= MemWrite_r @[EX_MEM.scala 34:25]
    MemRead_r <= io.MemRead @[EX_MEM.scala 35:19]
    io.MemRead_out <= MemRead_r @[EX_MEM.scala 36:24]
    RegWrite_r <= io.RegWrite @[EX_MEM.scala 37:20]
    io.RegWrite_out <= RegWrite_r @[EX_MEM.scala 38:25]
    MemtoReg_r <= io.MemtoReg @[EX_MEM.scala 39:20]
    io.MemtoReg_out <= MemtoReg_r @[EX_MEM.scala 40:25]
    rs2_r <= io.rs2 @[EX_MEM.scala 41:15]
    io.rs2_out <= rs2_r @[EX_MEM.scala 42:20]
    alu_r <= io.alu @[EX_MEM.scala 43:15]
    io.alu_out <= alu_r @[EX_MEM.scala 44:20]
    rd_r <= io.rd @[EX_MEM.scala 45:14]
    io.rd_out <= rd_r @[EX_MEM.scala 46:19]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip RegWrite : UInt<1>, flip MemtoReg : UInt<1>, flip MemRead : UInt<1>, flip mem : SInt<32>, flip alu : SInt<32>, flip rd : UInt<5>, RegWrite_out : UInt<1>, MemtoReg_out : UInt<1>, MemRead_out : UInt<1>, mem_out : SInt<32>, alu_out : SInt<32>, rd_out : UInt<5>}
    
    reg mem_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 21:28]
    mem_r <= io.mem @[MEM_WB.scala 22:15]
    io.mem_out <= mem_r @[MEM_WB.scala 23:20]
    reg alu_r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 25:28]
    alu_r <= io.alu @[MEM_WB.scala 26:15]
    io.alu_out <= alu_r @[MEM_WB.scala 27:20]
    reg rd_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_WB.scala 29:27]
    rd_r <= io.rd @[MEM_WB.scala 30:14]
    io.rd_out <= rd_r @[MEM_WB.scala 31:19]
    reg RegWrite_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 33:33]
    RegWrite_r <= io.RegWrite @[MEM_WB.scala 34:20]
    io.RegWrite_out <= RegWrite_r @[MEM_WB.scala 35:25]
    reg MemtoReg_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 36:33]
    MemtoReg_r <= io.MemtoReg @[MEM_WB.scala 37:20]
    io.MemtoReg_out <= MemtoReg_r @[MEM_WB.scala 38:25]
    reg MemRead_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 40:32]
    MemRead_r <= io.MemRead @[MEM_WB.scala 41:19]
    io.MemRead_out <= MemRead_r @[MEM_WB.scala 42:24]
    
  module ForwardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_rd : UInt<5>, flip ID_EX_rs1_s : UInt<5>, flip ID_EX_rs2_s : UInt<5>, flip EX_MEM_RegWrite : UInt<1>, flip MEM_WB_rd : UInt<5>, flip MEM_WB_RegWrite : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[forwardingunit.scala 16:18]
    io.forward_b <= UInt<1>("h00") @[forwardingunit.scala 17:18]
    node _T = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 21:29]
    node _T_1 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 21:53]
    node _T_2 = and(_T, _T_1) @[forwardingunit.scala 21:37]
    node _T_3 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[forwardingunit.scala 21:84]
    node _T_4 = and(_T_2, _T_3) @[forwardingunit.scala 21:68]
    node _T_5 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 21:121]
    node _T_6 = and(_T_4, _T_5) @[forwardingunit.scala 21:104]
    when _T_6 : @[forwardingunit.scala 21:142]
      io.forward_a <= UInt<1>("h01") @[forwardingunit.scala 22:22]
      io.forward_b <= UInt<1>("h01") @[forwardingunit.scala 23:30]
      skip @[forwardingunit.scala 21:142]
    else : @[forwardingunit.scala 24:113]
      node _T_7 = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 24:36]
      node _T_8 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 24:60]
      node _T_9 = and(_T_7, _T_8) @[forwardingunit.scala 24:44]
      node _T_10 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 24:92]
      node _T_11 = and(_T_9, _T_10) @[forwardingunit.scala 24:75]
      when _T_11 : @[forwardingunit.scala 24:113]
        io.forward_b <= UInt<1>("h01") @[forwardingunit.scala 25:30]
        skip @[forwardingunit.scala 24:113]
      else : @[forwardingunit.scala 26:113]
        node _T_12 = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 26:36]
        node _T_13 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 26:60]
        node _T_14 = and(_T_12, _T_13) @[forwardingunit.scala 26:44]
        node _T_15 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[forwardingunit.scala 26:92]
        node _T_16 = and(_T_14, _T_15) @[forwardingunit.scala 26:75]
        when _T_16 : @[forwardingunit.scala 26:113]
          io.forward_a <= UInt<1>("h01") @[forwardingunit.scala 27:30]
          skip @[forwardingunit.scala 26:113]
    node _T_17 = eq(io.MEM_WB_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 31:32]
    node _T_18 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[forwardingunit.scala 31:56]
    node _T_19 = and(_T_17, _T_18) @[forwardingunit.scala 31:40]
    node _T_20 = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 31:96]
    node _T_21 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 31:125]
    node _T_22 = and(_T_20, _T_21) @[forwardingunit.scala 31:108]
    node _T_23 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[forwardingunit.scala 32:22]
    node _T_24 = and(_T_22, _T_23) @[forwardingunit.scala 31:141]
    node _T_25 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 32:59]
    node _T_26 = and(_T_24, _T_25) @[forwardingunit.scala 32:42]
    node _T_27 = not(_T_26) @[forwardingunit.scala 31:74]
    node _T_28 = and(_T_19, _T_27) @[forwardingunit.scala 31:71]
    node _T_29 = eq(io.MEM_WB_rd, io.ID_EX_rs1_s) @[forwardingunit.scala 32:96]
    node _T_30 = and(_T_28, _T_29) @[forwardingunit.scala 32:80]
    node _T_31 = eq(io.MEM_WB_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 33:22]
    node _T_32 = and(_T_30, _T_31) @[forwardingunit.scala 32:116]
    when _T_32 : @[forwardingunit.scala 33:43]
      io.forward_a <= UInt<2>("h02") @[forwardingunit.scala 34:30]
      io.forward_b <= UInt<2>("h02") @[forwardingunit.scala 35:30]
      skip @[forwardingunit.scala 33:43]
    else : @[forwardingunit.scala 37:78]
      node _T_33 = eq(io.MEM_WB_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 36:40]
      node _T_34 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[forwardingunit.scala 36:64]
      node _T_35 = and(_T_33, _T_34) @[forwardingunit.scala 36:48]
      node _T_36 = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 36:104]
      node _T_37 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 36:130]
      node _T_38 = and(_T_36, _T_37) @[forwardingunit.scala 36:113]
      node _T_39 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 37:19]
      node _T_40 = and(_T_38, _T_39) @[forwardingunit.scala 36:146]
      node _T_41 = not(_T_40) @[forwardingunit.scala 36:82]
      node _T_42 = and(_T_35, _T_41) @[forwardingunit.scala 36:79]
      node _T_43 = eq(io.MEM_WB_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 37:57]
      node _T_44 = and(_T_42, _T_43) @[forwardingunit.scala 37:40]
      when _T_44 : @[forwardingunit.scala 37:78]
        io.forward_b <= UInt<2>("h02") @[forwardingunit.scala 38:30]
        skip @[forwardingunit.scala 37:78]
      else : @[forwardingunit.scala 40:80]
        node _T_45 = eq(io.MEM_WB_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 39:40]
        node _T_46 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[forwardingunit.scala 39:64]
        node _T_47 = and(_T_45, _T_46) @[forwardingunit.scala 39:48]
        node _T_48 = eq(io.EX_MEM_RegWrite, UInt<1>("h01")) @[forwardingunit.scala 39:104]
        node _T_49 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[forwardingunit.scala 39:129]
        node _T_50 = and(_T_48, _T_49) @[forwardingunit.scala 39:112]
        node _T_51 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[forwardingunit.scala 40:19]
        node _T_52 = and(_T_50, _T_51) @[forwardingunit.scala 39:145]
        node _T_53 = not(_T_52) @[forwardingunit.scala 39:82]
        node _T_54 = and(_T_47, _T_53) @[forwardingunit.scala 39:79]
        node _T_55 = eq(io.MEM_WB_rd, io.ID_EX_rs1_s) @[forwardingunit.scala 40:59]
        node _T_56 = and(_T_54, _T_55) @[forwardingunit.scala 40:41]
        when _T_56 : @[forwardingunit.scala 40:80]
          io.forward_a <= UInt<2>("h02") @[forwardingunit.scala 41:30]
          skip @[forwardingunit.scala 40:80]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_INST : UInt<32>, flip ID_EX_MEMREAD : UInt<1>, flip ID_EX_REGRD : UInt<5>, flip pc_in : UInt<32>, flip current_pc : UInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : UInt<32>, current_pc_out : UInt<32>}
    
    node rs1_sel = bits(io.IF_ID_INST, 19, 15) @[hazarddetect.scala 18:30]
    node rs2_sel = bits(io.IF_ID_INST, 24, 20) @[hazarddetect.scala 19:30]
    node _T = eq(io.ID_EX_MEMREAD, UInt<1>("h01")) @[hazarddetect.scala 20:25]
    node _T_1 = eq(io.ID_EX_REGRD, rs1_sel) @[hazarddetect.scala 20:56]
    node _T_2 = eq(io.ID_EX_REGRD, rs2_sel) @[hazarddetect.scala 20:88]
    node _T_3 = or(_T_1, _T_2) @[hazarddetect.scala 20:69]
    node _T_4 = and(_T, _T_3) @[hazarddetect.scala 20:36]
    when _T_4 : @[hazarddetect.scala 20:103]
      io.inst_forward <= UInt<1>("h01") @[hazarddetect.scala 21:23]
      io.pc_forward <= UInt<1>("h01") @[hazarddetect.scala 22:21]
      io.ctrl_forward <= UInt<1>("h01") @[hazarddetect.scala 23:23]
      io.inst_out <= io.IF_ID_INST @[hazarddetect.scala 24:19]
      io.pc_out <= io.pc_in @[hazarddetect.scala 25:17]
      io.current_pc_out <= io.current_pc @[hazarddetect.scala 26:25]
      skip @[hazarddetect.scala 20:103]
    else : @[hazarddetect.scala 28:16]
      io.inst_forward <= UInt<1>("h00") @[hazarddetect.scala 29:21]
      io.pc_forward <= UInt<1>("h00") @[hazarddetect.scala 30:19]
      io.ctrl_forward <= UInt<1>("h00") @[hazarddetect.scala 31:21]
      io.inst_out <= io.IF_ID_INST @[hazarddetect.scala 32:17]
      io.pc_out <= io.pc_in @[hazarddetect.scala 33:15]
      io.current_pc_out <= io.current_pc @[hazarddetect.scala 34:23]
      skip @[hazarddetect.scala 28:16]
    
  module DecodeBranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_REGRD : UInt<5>, flip ID_EX_MEMRD : UInt<1>, flip EX_MEM_REGRD : UInt<5>, flip EX_MEM_MEMRD : UInt<1>, flip MEM_WB_REGRD : UInt<5>, flip MEM_WB_MEMRD : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[BFU.scala 19:20]
    io.forward_rs2 <= UInt<1>("h00") @[BFU.scala 20:20]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[BFU.scala 21:21]
    when _T : @[BFU.scala 21:30]
      node _T_1 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 23:23]
      node _T_2 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BFU.scala 23:56]
      node _T_3 = and(_T_1, _T_2) @[BFU.scala 23:38]
      node _T_4 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 23:83]
      node _T_5 = and(_T_3, _T_4) @[BFU.scala 23:64]
      node _T_6 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 23:118]
      node _T_7 = and(_T_5, _T_6) @[BFU.scala 23:99]
      when _T_7 : @[BFU.scala 23:135]
        io.forward_rs1 <= UInt<1>("h01") @[BFU.scala 24:20]
        io.forward_rs2 <= UInt<1>("h01") @[BFU.scala 25:20]
        skip @[BFU.scala 23:135]
      else : @[BFU.scala 26:107]
        node _T_8 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 26:30]
        node _T_9 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BFU.scala 26:63]
        node _T_10 = and(_T_8, _T_9) @[BFU.scala 26:45]
        node _T_11 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 26:90]
        node _T_12 = and(_T_10, _T_11) @[BFU.scala 26:71]
        when _T_12 : @[BFU.scala 26:107]
          io.forward_rs1 <= UInt<1>("h01") @[BFU.scala 27:20]
          skip @[BFU.scala 26:107]
        else : @[BFU.scala 28:107]
          node _T_13 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 28:30]
          node _T_14 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BFU.scala 28:63]
          node _T_15 = and(_T_13, _T_14) @[BFU.scala 28:45]
          node _T_16 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 28:90]
          node _T_17 = and(_T_15, _T_16) @[BFU.scala 28:71]
          when _T_17 : @[BFU.scala 28:107]
            io.forward_rs2 <= UInt<1>("h01") @[BFU.scala 29:20]
            skip @[BFU.scala 28:107]
      node _T_18 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 33:24]
      node _T_19 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 33:58]
      node _T_20 = and(_T_18, _T_19) @[BFU.scala 33:39]
      node _T_21 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 34:23]
      node _T_22 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 34:58]
      node _T_23 = and(_T_21, _T_22) @[BFU.scala 34:39]
      node _T_24 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 34:93]
      node _T_25 = and(_T_23, _T_24) @[BFU.scala 34:74]
      node _T_26 = not(_T_25) @[BFU.scala 34:5]
      node _T_27 = and(_T_20, _T_26) @[BFU.scala 33:66]
      node _T_28 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 35:22]
      node _T_29 = and(_T_27, _T_28) @[BFU.scala 34:110]
      node _T_30 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 35:58]
      node _T_31 = and(_T_29, _T_30) @[BFU.scala 35:38]
      when _T_31 : @[BFU.scala 35:75]
        io.forward_rs1 <= UInt<2>("h02") @[BFU.scala 37:20]
        io.forward_rs2 <= UInt<2>("h02") @[BFU.scala 38:20]
        skip @[BFU.scala 35:75]
      else : @[BFU.scala 42:39]
        node _T_32 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 40:31]
        node _T_33 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 40:65]
        node _T_34 = and(_T_32, _T_33) @[BFU.scala 40:46]
        node _T_35 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 41:23]
        node _T_36 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 41:58]
        node _T_37 = and(_T_35, _T_36) @[BFU.scala 41:39]
        node _T_38 = not(_T_37) @[BFU.scala 41:5]
        node _T_39 = and(_T_34, _T_38) @[BFU.scala 40:73]
        node _T_40 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 42:22]
        node _T_41 = and(_T_39, _T_40) @[BFU.scala 41:75]
        when _T_41 : @[BFU.scala 42:39]
          io.forward_rs2 <= UInt<2>("h02") @[BFU.scala 44:20]
          skip @[BFU.scala 42:39]
        else : @[BFU.scala 48:39]
          node _T_42 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 46:31]
          node _T_43 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 46:65]
          node _T_44 = and(_T_42, _T_43) @[BFU.scala 46:46]
          node _T_45 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 47:23]
          node _T_46 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 47:58]
          node _T_47 = and(_T_45, _T_46) @[BFU.scala 47:39]
          node _T_48 = not(_T_47) @[BFU.scala 47:5]
          node _T_49 = and(_T_44, _T_48) @[BFU.scala 46:73]
          node _T_50 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 48:22]
          node _T_51 = and(_T_49, _T_50) @[BFU.scala 47:75]
          when _T_51 : @[BFU.scala 48:39]
            io.forward_rs1 <= UInt<2>("h02") @[BFU.scala 50:20]
            skip @[BFU.scala 48:39]
          else : @[BFU.scala 54:75]
            node _T_52 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 52:31]
            node _T_53 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 52:65]
            node _T_54 = and(_T_52, _T_53) @[BFU.scala 52:46]
            node _T_55 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 53:23]
            node _T_56 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 53:58]
            node _T_57 = and(_T_55, _T_56) @[BFU.scala 53:39]
            node _T_58 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 53:93]
            node _T_59 = and(_T_57, _T_58) @[BFU.scala 53:74]
            node _T_60 = not(_T_59) @[BFU.scala 53:5]
            node _T_61 = and(_T_54, _T_60) @[BFU.scala 52:73]
            node _T_62 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 54:22]
            node _T_63 = and(_T_61, _T_62) @[BFU.scala 53:110]
            node _T_64 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 54:58]
            node _T_65 = and(_T_63, _T_64) @[BFU.scala 54:38]
            when _T_65 : @[BFU.scala 54:75]
              io.forward_rs1 <= UInt<3>("h04") @[BFU.scala 56:20]
              io.forward_rs2 <= UInt<3>("h04") @[BFU.scala 57:20]
              skip @[BFU.scala 54:75]
            else : @[BFU.scala 61:39]
              node _T_66 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 59:31]
              node _T_67 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 59:65]
              node _T_68 = and(_T_66, _T_67) @[BFU.scala 59:46]
              node _T_69 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 60:23]
              node _T_70 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 60:58]
              node _T_71 = and(_T_69, _T_70) @[BFU.scala 60:39]
              node _T_72 = not(_T_71) @[BFU.scala 60:5]
              node _T_73 = and(_T_68, _T_72) @[BFU.scala 59:73]
              node _T_74 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 61:22]
              node _T_75 = and(_T_73, _T_74) @[BFU.scala 60:75]
              when _T_75 : @[BFU.scala 61:39]
                io.forward_rs2 <= UInt<3>("h04") @[BFU.scala 63:20]
                skip @[BFU.scala 61:39]
              else : @[BFU.scala 67:39]
                node _T_76 = eq(io.ctrl_branch, UInt<1>("h01")) @[BFU.scala 65:30]
                node _T_77 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 65:57]
                node _T_78 = and(_T_76, _T_77) @[BFU.scala 65:38]
                node _T_79 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 65:91]
                node _T_80 = and(_T_78, _T_79) @[BFU.scala 65:72]
                node _T_81 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 66:23]
                node _T_82 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 66:58]
                node _T_83 = and(_T_81, _T_82) @[BFU.scala 66:39]
                node _T_84 = not(_T_83) @[BFU.scala 66:5]
                node _T_85 = and(_T_80, _T_84) @[BFU.scala 65:99]
                node _T_86 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 67:22]
                node _T_87 = and(_T_85, _T_86) @[BFU.scala 66:75]
                when _T_87 : @[BFU.scala 67:39]
                  io.forward_rs1 <= UInt<3>("h04") @[BFU.scala 69:20]
                  skip @[BFU.scala 67:39]
      node _T_88 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 74:24]
      node _T_89 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 74:58]
      node _T_90 = and(_T_88, _T_89) @[BFU.scala 74:39]
      node _T_91 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 76:23]
      node _T_92 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 76:58]
      node _T_93 = and(_T_91, _T_92) @[BFU.scala 76:39]
      node _T_94 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 76:93]
      node _T_95 = and(_T_93, _T_94) @[BFU.scala 76:74]
      node _T_96 = not(_T_95) @[BFU.scala 76:5]
      node _T_97 = and(_T_90, _T_96) @[BFU.scala 74:66]
      node _T_98 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 78:24]
      node _T_99 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 78:60]
      node _T_100 = and(_T_98, _T_99) @[BFU.scala 78:40]
      node _T_101 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 78:96]
      node _T_102 = and(_T_100, _T_101) @[BFU.scala 78:76]
      node _T_103 = not(_T_102) @[BFU.scala 78:5]
      node _T_104 = and(_T_97, _T_103) @[BFU.scala 76:110]
      node _T_105 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 79:22]
      node _T_106 = and(_T_104, _T_105) @[BFU.scala 78:113]
      node _T_107 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BFU.scala 79:58]
      node _T_108 = and(_T_106, _T_107) @[BFU.scala 79:38]
      when _T_108 : @[BFU.scala 79:75]
        io.forward_rs1 <= UInt<2>("h03") @[BFU.scala 81:20]
        io.forward_rs2 <= UInt<2>("h03") @[BFU.scala 82:20]
        skip @[BFU.scala 79:75]
      else : @[BFU.scala 90:41]
        node _T_109 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 85:31]
        node _T_110 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 85:65]
        node _T_111 = and(_T_109, _T_110) @[BFU.scala 85:46]
        node _T_112 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 87:25]
        node _T_113 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 87:60]
        node _T_114 = and(_T_112, _T_113) @[BFU.scala 87:41]
        node _T_115 = not(_T_114) @[BFU.scala 87:7]
        node _T_116 = and(_T_111, _T_115) @[BFU.scala 85:73]
        node _T_117 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 89:26]
        node _T_118 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 89:62]
        node _T_119 = and(_T_117, _T_118) @[BFU.scala 89:42]
        node _T_120 = not(_T_119) @[BFU.scala 89:7]
        node _T_121 = and(_T_116, _T_120) @[BFU.scala 87:77]
        node _T_122 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BFU.scala 90:24]
        node _T_123 = and(_T_121, _T_122) @[BFU.scala 89:79]
        when _T_123 : @[BFU.scala 90:41]
          io.forward_rs2 <= UInt<2>("h03") @[BFU.scala 92:22]
          skip @[BFU.scala 90:41]
        else : @[BFU.scala 100:41]
          node _T_124 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 95:31]
          node _T_125 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 95:65]
          node _T_126 = and(_T_124, _T_125) @[BFU.scala 95:46]
          node _T_127 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 97:25]
          node _T_128 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 97:60]
          node _T_129 = and(_T_127, _T_128) @[BFU.scala 97:41]
          node _T_130 = not(_T_129) @[BFU.scala 97:7]
          node _T_131 = and(_T_126, _T_130) @[BFU.scala 95:73]
          node _T_132 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 99:26]
          node _T_133 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 99:62]
          node _T_134 = and(_T_132, _T_133) @[BFU.scala 99:42]
          node _T_135 = not(_T_134) @[BFU.scala 99:7]
          node _T_136 = and(_T_131, _T_135) @[BFU.scala 97:77]
          node _T_137 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 100:24]
          node _T_138 = and(_T_136, _T_137) @[BFU.scala 99:79]
          when _T_138 : @[BFU.scala 100:41]
            io.forward_rs1 <= UInt<2>("h03") @[BFU.scala 102:22]
            skip @[BFU.scala 100:41]
          else : @[BFU.scala 109:75]
            node _T_139 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 104:33]
            node _T_140 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 104:67]
            node _T_141 = and(_T_139, _T_140) @[BFU.scala 104:48]
            node _T_142 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 106:23]
            node _T_143 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 106:58]
            node _T_144 = and(_T_142, _T_143) @[BFU.scala 106:39]
            node _T_145 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 106:93]
            node _T_146 = and(_T_144, _T_145) @[BFU.scala 106:74]
            node _T_147 = not(_T_146) @[BFU.scala 106:5]
            node _T_148 = and(_T_141, _T_147) @[BFU.scala 104:75]
            node _T_149 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 108:24]
            node _T_150 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 108:60]
            node _T_151 = and(_T_149, _T_150) @[BFU.scala 108:40]
            node _T_152 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 108:96]
            node _T_153 = and(_T_151, _T_152) @[BFU.scala 108:76]
            node _T_154 = not(_T_153) @[BFU.scala 108:5]
            node _T_155 = and(_T_148, _T_154) @[BFU.scala 106:110]
            node _T_156 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 109:22]
            node _T_157 = and(_T_155, _T_156) @[BFU.scala 108:113]
            node _T_158 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BFU.scala 109:58]
            node _T_159 = and(_T_157, _T_158) @[BFU.scala 109:38]
            when _T_159 : @[BFU.scala 109:75]
              io.forward_rs1 <= UInt<3>("h05") @[BFU.scala 111:20]
              io.forward_rs2 <= UInt<3>("h05") @[BFU.scala 112:20]
              skip @[BFU.scala 109:75]
            else : @[BFU.scala 120:41]
              node _T_160 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 115:31]
              node _T_161 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 115:65]
              node _T_162 = and(_T_160, _T_161) @[BFU.scala 115:46]
              node _T_163 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 117:25]
              node _T_164 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BFU.scala 117:60]
              node _T_165 = and(_T_163, _T_164) @[BFU.scala 117:41]
              node _T_166 = not(_T_165) @[BFU.scala 117:7]
              node _T_167 = and(_T_162, _T_166) @[BFU.scala 115:73]
              node _T_168 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 119:26]
              node _T_169 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BFU.scala 119:62]
              node _T_170 = and(_T_168, _T_169) @[BFU.scala 119:42]
              node _T_171 = not(_T_170) @[BFU.scala 119:7]
              node _T_172 = and(_T_167, _T_171) @[BFU.scala 117:77]
              node _T_173 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BFU.scala 120:24]
              node _T_174 = and(_T_172, _T_173) @[BFU.scala 119:79]
              when _T_174 : @[BFU.scala 120:41]
                io.forward_rs2 <= UInt<3>("h05") @[BFU.scala 122:22]
                skip @[BFU.scala 120:41]
              else : @[BFU.scala 130:41]
                node _T_175 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 125:31]
                node _T_176 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 125:65]
                node _T_177 = and(_T_175, _T_176) @[BFU.scala 125:46]
                node _T_178 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 127:25]
                node _T_179 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 127:60]
                node _T_180 = and(_T_178, _T_179) @[BFU.scala 127:41]
                node _T_181 = not(_T_180) @[BFU.scala 127:7]
                node _T_182 = and(_T_177, _T_181) @[BFU.scala 125:73]
                node _T_183 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 129:26]
                node _T_184 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 129:62]
                node _T_185 = and(_T_183, _T_184) @[BFU.scala 129:42]
                node _T_186 = not(_T_185) @[BFU.scala 129:7]
                node _T_187 = and(_T_182, _T_186) @[BFU.scala 127:77]
                node _T_188 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 130:24]
                node _T_189 = and(_T_187, _T_188) @[BFU.scala 129:78]
                when _T_189 : @[BFU.scala 130:41]
                  io.forward_rs1 <= UInt<3>("h05") @[BFU.scala 132:22]
                  skip @[BFU.scala 130:41]
      skip @[BFU.scala 21:30]
    else : @[BFU.scala 137:35]
      node _T_190 = eq(io.ctrl_branch, UInt<1>("h00")) @[BFU.scala 137:26]
      when _T_190 : @[BFU.scala 137:35]
        node _T_191 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 139:29]
        node _T_192 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BFU.scala 139:62]
        node _T_193 = and(_T_191, _T_192) @[BFU.scala 139:44]
        node _T_194 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 139:89]
        node _T_195 = and(_T_193, _T_194) @[BFU.scala 139:70]
        when _T_195 : @[BFU.scala 139:109]
          io.forward_rs1 <= UInt<3>("h06") @[BFU.scala 140:26]
          skip @[BFU.scala 139:109]
        node _T_196 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 144:30]
        node _T_197 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 144:64]
        node _T_198 = and(_T_196, _T_197) @[BFU.scala 144:45]
        node _T_199 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 145:29]
        node _T_200 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 145:64]
        node _T_201 = and(_T_199, _T_200) @[BFU.scala 145:45]
        node _T_202 = not(_T_201) @[BFU.scala 145:11]
        node _T_203 = and(_T_198, _T_202) @[BFU.scala 144:72]
        node _T_204 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 146:28]
        node _T_205 = and(_T_203, _T_204) @[BFU.scala 145:81]
        when _T_205 : @[BFU.scala 146:45]
          io.forward_rs1 <= UInt<3>("h07") @[BFU.scala 148:26]
          skip @[BFU.scala 146:45]
        else : @[BFU.scala 153:47]
          node _T_206 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 151:37]
          node _T_207 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BFU.scala 151:71]
          node _T_208 = and(_T_206, _T_207) @[BFU.scala 151:52]
          node _T_209 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 152:31]
          node _T_210 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 152:66]
          node _T_211 = and(_T_209, _T_210) @[BFU.scala 152:47]
          node _T_212 = not(_T_211) @[BFU.scala 152:13]
          node _T_213 = and(_T_208, _T_212) @[BFU.scala 151:79]
          node _T_214 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 153:30]
          node _T_215 = and(_T_213, _T_214) @[BFU.scala 152:83]
          when _T_215 : @[BFU.scala 153:47]
            io.forward_rs1 <= UInt<4>("h09") @[BFU.scala 155:28]
            skip @[BFU.scala 153:47]
        node _T_216 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 161:30]
        node _T_217 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 161:64]
        node _T_218 = and(_T_216, _T_217) @[BFU.scala 161:45]
        node _T_219 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 163:29]
        node _T_220 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 163:64]
        node _T_221 = and(_T_219, _T_220) @[BFU.scala 163:45]
        node _T_222 = not(_T_221) @[BFU.scala 163:11]
        node _T_223 = and(_T_218, _T_222) @[BFU.scala 161:72]
        node _T_224 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 165:30]
        node _T_225 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 165:66]
        node _T_226 = and(_T_224, _T_225) @[BFU.scala 165:46]
        node _T_227 = not(_T_226) @[BFU.scala 165:11]
        node _T_228 = and(_T_223, _T_227) @[BFU.scala 163:81]
        node _T_229 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 166:28]
        node _T_230 = and(_T_228, _T_229) @[BFU.scala 165:83]
        when _T_230 : @[BFU.scala 166:45]
          io.forward_rs1 <= UInt<4>("h08") @[BFU.scala 168:26]
          skip @[BFU.scala 166:45]
        else : @[BFU.scala 176:45]
          node _T_231 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BFU.scala 171:38]
          node _T_232 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BFU.scala 171:72]
          node _T_233 = and(_T_231, _T_232) @[BFU.scala 171:53]
          node _T_234 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BFU.scala 173:29]
          node _T_235 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BFU.scala 173:64]
          node _T_236 = and(_T_234, _T_235) @[BFU.scala 173:45]
          node _T_237 = not(_T_236) @[BFU.scala 173:11]
          node _T_238 = and(_T_233, _T_237) @[BFU.scala 171:80]
          node _T_239 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BFU.scala 175:30]
          node _T_240 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BFU.scala 175:66]
          node _T_241 = and(_T_239, _T_240) @[BFU.scala 175:46]
          node _T_242 = not(_T_241) @[BFU.scala 175:11]
          node _T_243 = and(_T_238, _T_242) @[BFU.scala 173:81]
          node _T_244 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BFU.scala 176:28]
          node _T_245 = and(_T_243, _T_244) @[BFU.scala 175:83]
          when _T_245 : @[BFU.scala 176:45]
            io.forward_rs1 <= UInt<4>("h0a") @[BFU.scala 178:26]
            skip @[BFU.scala 176:45]
        skip @[BFU.scala 137:35]
    
  module BranchLogic : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_rs1 : SInt<32>, flip in_rs2 : SInt<32>, flip in_func3 : UInt<3>, output : UInt<1>}
    
    node _T = eq(io.in_func3, UInt<1>("h00")) @[branchlogic.scala 14:20]
    when _T : @[branchlogic.scala 14:34]
      node _T_1 = eq(io.in_rs1, io.in_rs2) @[branchlogic.scala 16:20]
      when _T_1 : @[branchlogic.scala 16:35]
        io.output <= UInt<1>("h01") @[branchlogic.scala 17:17]
        skip @[branchlogic.scala 16:35]
      else : @[branchlogic.scala 18:18]
        io.output <= UInt<1>("h00") @[branchlogic.scala 19:17]
        skip @[branchlogic.scala 18:18]
      skip @[branchlogic.scala 14:34]
    else : @[branchlogic.scala 21:41]
      node _T_2 = eq(io.in_func3, UInt<1>("h01")) @[branchlogic.scala 21:27]
      when _T_2 : @[branchlogic.scala 21:41]
        node _T_3 = neq(io.in_rs1, io.in_rs2) @[branchlogic.scala 23:20]
        when _T_3 : @[branchlogic.scala 23:35]
          io.output <= UInt<1>("h01") @[branchlogic.scala 24:17]
          skip @[branchlogic.scala 23:35]
        else : @[branchlogic.scala 25:18]
          io.output <= UInt<1>("h00") @[branchlogic.scala 26:17]
          skip @[branchlogic.scala 25:18]
        skip @[branchlogic.scala 21:41]
      else : @[branchlogic.scala 28:41]
        node _T_4 = eq(io.in_func3, UInt<3>("h04")) @[branchlogic.scala 28:27]
        when _T_4 : @[branchlogic.scala 28:41]
          node _T_5 = lt(io.in_rs1, io.in_rs2) @[branchlogic.scala 30:20]
          when _T_5 : @[branchlogic.scala 30:33]
            io.output <= UInt<1>("h01") @[branchlogic.scala 31:17]
            skip @[branchlogic.scala 30:33]
          else : @[branchlogic.scala 32:18]
            io.output <= UInt<1>("h00") @[branchlogic.scala 33:17]
            skip @[branchlogic.scala 32:18]
          skip @[branchlogic.scala 28:41]
        else : @[branchlogic.scala 35:41]
          node _T_6 = eq(io.in_func3, UInt<3>("h05")) @[branchlogic.scala 35:27]
          when _T_6 : @[branchlogic.scala 35:41]
            node _T_7 = geq(io.in_rs1, io.in_rs2) @[branchlogic.scala 37:20]
            when _T_7 : @[branchlogic.scala 37:34]
              io.output <= UInt<1>("h01") @[branchlogic.scala 38:17]
              skip @[branchlogic.scala 37:34]
            else : @[branchlogic.scala 39:18]
              io.output <= UInt<1>("h00") @[branchlogic.scala 40:17]
              skip @[branchlogic.scala 39:18]
            skip @[branchlogic.scala 35:41]
          else : @[branchlogic.scala 42:41]
            node _T_8 = eq(io.in_func3, UInt<3>("h06")) @[branchlogic.scala 42:27]
            when _T_8 : @[branchlogic.scala 42:41]
              node _T_9 = asUInt(io.in_rs1) @[branchlogic.scala 44:20]
              node _T_10 = asUInt(io.in_rs2) @[branchlogic.scala 44:39]
              node _T_11 = lt(_T_9, _T_10) @[branchlogic.scala 44:27]
              when _T_11 : @[branchlogic.scala 44:47]
                io.output <= UInt<1>("h01") @[branchlogic.scala 45:17]
                skip @[branchlogic.scala 44:47]
              else : @[branchlogic.scala 46:18]
                io.output <= UInt<1>("h00") @[branchlogic.scala 47:17]
                skip @[branchlogic.scala 46:18]
              skip @[branchlogic.scala 42:41]
            else : @[branchlogic.scala 49:41]
              node _T_12 = eq(io.in_func3, UInt<3>("h07")) @[branchlogic.scala 49:27]
              when _T_12 : @[branchlogic.scala 49:41]
                node _T_13 = asUInt(io.in_rs1) @[branchlogic.scala 51:20]
                node _T_14 = asUInt(io.in_rs2) @[branchlogic.scala 51:40]
                node _T_15 = geq(_T_13, _T_14) @[branchlogic.scala 51:27]
                when _T_15 : @[branchlogic.scala 51:48]
                  io.output <= UInt<1>("h01") @[branchlogic.scala 52:17]
                  skip @[branchlogic.scala 51:48]
                else : @[branchlogic.scala 53:18]
                  io.output <= UInt<1>("h00") @[branchlogic.scala 54:17]
                  skip @[branchlogic.scala 53:18]
                skip @[branchlogic.scala 49:41]
              else : @[branchlogic.scala 56:16]
                io.output <= UInt<1>("h00") @[branchlogic.scala 57:15]
                skip @[branchlogic.scala 56:16]
    
  module StructuralDetector : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_REGRD : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[SDU.scala 13:24]
    node _T_1 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[SDU.scala 13:52]
    node _T_2 = and(_T, _T_1) @[SDU.scala 13:32]
    when _T_2 : @[SDU.scala 13:68]
      io.fwd_rs1 <= UInt<1>("h01") @[SDU.scala 14:16]
      skip @[SDU.scala 13:68]
    else : @[SDU.scala 15:16]
      io.fwd_rs1 <= UInt<1>("h00") @[SDU.scala 16:16]
      skip @[SDU.scala 15:16]
    node _T_3 = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[SDU.scala 18:24]
    node _T_4 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[SDU.scala 18:51]
    node _T_5 = and(_T_3, _T_4) @[SDU.scala 18:32]
    when _T_5 : @[SDU.scala 18:67]
      io.fwd_rs2 <= UInt<1>("h01") @[SDU.scala 19:16]
      skip @[SDU.scala 18:67]
    else : @[SDU.scala 20:16]
      io.fwd_rs2 <= UInt<1>("h00") @[SDU.scala 21:16]
      skip @[SDU.scala 20:16]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>, addr : UInt<10>}
    
    inst PCMod of pc @[top.scala 12:19]
    PCMod.clock <= clock
    PCMod.reset <= reset
    inst ALUMod of ALU_ @[top.scala 13:20]
    ALUMod.clock <= clock
    ALUMod.reset <= reset
    inst ALUcMod of alucontrol @[top.scala 14:22]
    ALUcMod.clock <= clock
    ALUcMod.reset <= reset
    inst CntrlDecMod of controldec @[top.scala 16:26]
    CntrlDecMod.clock <= clock
    CntrlDecMod.reset <= reset
    inst datamemMod of datamem @[top.scala 17:25]
    datamemMod.clock <= clock
    datamemMod.reset <= reset
    inst ImmgenMod of ImmdValGen1 @[top.scala 18:23]
    ImmgenMod.clock <= clock
    ImmgenMod.reset <= reset
    inst instmemMod of InstMem @[top.scala 19:25]
    instmemMod.clock <= clock
    instmemMod.reset <= reset
    inst jalrCompMod of jalr @[top.scala 20:26]
    jalrCompMod.clock <= clock
    jalrCompMod.reset <= reset
    inst regfileMod of regfile @[top.scala 21:25]
    regfileMod.clock <= clock
    regfileMod.reset <= reset
    inst ifid of IF_ID @[top.scala 22:18]
    ifid.clock <= clock
    ifid.reset <= reset
    inst idex of ID_EX @[top.scala 23:18]
    idex.clock <= clock
    idex.reset <= reset
    inst exemem of EX_MEM @[top.scala 24:20]
    exemem.clock <= clock
    exemem.reset <= reset
    inst memwb of MEM_WB @[top.scala 25:19]
    memwb.clock <= clock
    memwb.reset <= reset
    inst FU of ForwardUnit @[top.scala 26:16]
    FU.clock <= clock
    FU.reset <= reset
    inst HD of HazardDetection @[top.scala 27:16]
    HD.clock <= clock
    HD.reset <= reset
    inst BFU of DecodeBranchForward @[top.scala 28:17]
    BFU.clock <= clock
    BFU.reset <= reset
    inst BLU of BranchLogic @[top.scala 29:17]
    BLU.clock <= clock
    BLU.reset <= reset
    inst SDU of StructuralDetector @[top.scala 30:17]
    SDU.clock <= clock
    SDU.reset <= reset
    FU.io.EX_MEM_rd <= exemem.io.rd_out @[top.scala 31:17]
    FU.io.ID_EX_rs1_s <= idex.io.rs1_s_out @[top.scala 32:19]
    FU.io.ID_EX_rs2_s <= idex.io.rs2_s_out @[top.scala 33:19]
    FU.io.EX_MEM_RegWrite <= exemem.io.RegWrite_out @[top.scala 34:23]
    FU.io.MEM_WB_rd <= memwb.io.rd_out @[top.scala 35:17]
    FU.io.MEM_WB_RegWrite <= memwb.io.RegWrite_out @[top.scala 36:23]
    PCMod.io.input <= PCMod.io.pc4 @[top.scala 42:16]
    node _instmemMod_io_addr_T = bits(PCMod.io.pc, 11, 2) @[top.scala 44:34]
    instmemMod.io.addr <= _instmemMod_io_addr_T @[top.scala 44:20]
    ifid.io.pc <= PCMod.io.pc @[top.scala 46:12]
    ifid.io.pc4 <= PCMod.io.pc4 @[top.scala 47:13]
    ifid.io.ins <= instmemMod.io.inst @[top.scala 48:13]
    node _CntrlDecMod_io_opcode_T = bits(ifid.io.ins_out, 6, 0) @[top.scala 50:41]
    CntrlDecMod.io.opcode <= _CntrlDecMod_io_opcode_T @[top.scala 50:23]
    io.addr <= instmemMod.io.addr @[top.scala 51:9]
    node _regfileMod_io_rs1_T = bits(ifid.io.ins_out, 19, 15) @[top.scala 55:36]
    regfileMod.io.rs1 <= _regfileMod_io_rs1_T @[top.scala 55:18]
    node _regfileMod_io_rs2_T = bits(ifid.io.ins_out, 24, 20) @[top.scala 56:37]
    regfileMod.io.rs2 <= _regfileMod_io_rs2_T @[top.scala 56:19]
    ImmgenMod.io.instruction <= ifid.io.ins_out @[top.scala 60:26]
    ImmgenMod.io.pc <= ifid.io.pc_out @[top.scala 61:17]
    ALUcMod.io.aluOp <= idex.io.AluOp_out @[top.scala 64:18]
    ALUcMod.io.func3 <= idex.io.func3_out @[top.scala 65:18]
    ALUcMod.io.func7 <= idex.io.func7_out @[top.scala 66:18]
    node _SDU_io_rs1_sel_T = bits(ifid.io.ins_out, 19, 15) @[top.scala 68:34]
    SDU.io.rs1_sel <= _SDU_io_rs1_sel_T @[top.scala 68:16]
    node _SDU_io_rs2_sel_T = bits(ifid.io.ins_out, 24, 20) @[top.scala 69:34]
    SDU.io.rs2_sel <= _SDU_io_rs2_sel_T @[top.scala 69:16]
    SDU.io.MEM_WB_REGRD <= memwb.io.rd_out @[top.scala 70:21]
    SDU.io.MEM_WB_regWr <= memwb.io.RegWrite_out @[top.scala 71:21]
    node _T = eq(SDU.io.fwd_rs1, UInt<1>("h01")) @[top.scala 73:21]
    when _T : @[top.scala 73:30]
      idex.io.rs1 <= regfileMod.io.WriteData @[top.scala 74:15]
      skip @[top.scala 73:30]
    else : @[top.scala 75:14]
      idex.io.rs1 <= regfileMod.io.rdata1 @[top.scala 76:15]
      skip @[top.scala 75:14]
    node _T_1 = eq(SDU.io.fwd_rs2, UInt<1>("h01")) @[top.scala 79:21]
    when _T_1 : @[top.scala 79:30]
      idex.io.rs2 <= regfileMod.io.WriteData @[top.scala 80:15]
      skip @[top.scala 79:30]
    else : @[top.scala 81:14]
      idex.io.rs2 <= regfileMod.io.rdata2 @[top.scala 82:15]
      skip @[top.scala 81:14]
    node _T_2 = eq(HD.io.ctrl_forward, UInt<1>("h01")) @[top.scala 85:25]
    when _T_2 : @[top.scala 85:37]
      idex.io.MemWrite <= UInt<1>("h00") @[top.scala 86:22]
      idex.io.MemRead <= UInt<1>("h00") @[top.scala 87:21]
      idex.io.Branch <= UInt<1>("h00") @[top.scala 88:20]
      idex.io.RegWrite <= UInt<1>("h00") @[top.scala 89:22]
      idex.io.MemtoReg <= UInt<1>("h00") @[top.scala 90:21]
      idex.io.AluOp <= UInt<1>("h00") @[top.scala 91:19]
      idex.io.OpA_s <= UInt<1>("h00") @[top.scala 92:20]
      idex.io.OpB_s <= UInt<1>("h00") @[top.scala 93:20]
      idex.io.NextPc <= UInt<1>("h00") @[top.scala 94:20]
      skip @[top.scala 85:37]
    else : @[top.scala 96:14]
      idex.io.MemWrite <= CntrlDecMod.io.MemWrite @[top.scala 97:22]
      idex.io.MemRead <= CntrlDecMod.io.MemRead @[top.scala 98:21]
      idex.io.Branch <= CntrlDecMod.io.Branch @[top.scala 99:19]
      idex.io.RegWrite <= CntrlDecMod.io.RegWrite @[top.scala 100:23]
      idex.io.MemtoReg <= CntrlDecMod.io.Mem2Reg @[top.scala 101:22]
      idex.io.AluOp <= CntrlDecMod.io.aluop @[top.scala 102:19]
      idex.io.OpA_s <= CntrlDecMod.io.opAsel @[top.scala 103:19]
      idex.io.OpB_s <= CntrlDecMod.io.opBsel @[top.scala 104:19]
      idex.io.NextPc <= CntrlDecMod.io.nextPCsel @[top.scala 105:20]
      skip @[top.scala 96:14]
    BFU.io.ID_EX_REGRD <= idex.io.rd_out @[top.scala 109:20]
    BFU.io.ID_EX_MEMRD <= idex.io.MemRead_out @[top.scala 110:20]
    BFU.io.EX_MEM_REGRD <= exemem.io.rd_out @[top.scala 111:21]
    BFU.io.MEM_WB_REGRD <= memwb.io.rd_out @[top.scala 112:21]
    BFU.io.EX_MEM_MEMRD <= exemem.io.MemRead_out @[top.scala 113:21]
    BFU.io.MEM_WB_MEMRD <= memwb.io.MemRead_out @[top.scala 114:21]
    node _BFU_io_rs1_sel_T = bits(ifid.io.ins_out, 19, 15) @[top.scala 115:34]
    BFU.io.rs1_sel <= _BFU_io_rs1_sel_T @[top.scala 115:16]
    node _BFU_io_rs2_sel_T = bits(ifid.io.ins_out, 24, 20) @[top.scala 116:34]
    BFU.io.rs2_sel <= _BFU_io_rs2_sel_T @[top.scala 116:16]
    BFU.io.ctrl_branch <= CntrlDecMod.io.Branch @[top.scala 117:20]
    BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 119:15]
    BLU.io.in_rs2 <= regfileMod.io.rdata2 @[top.scala 120:15]
    node _BLU_io_in_func3_T = bits(ifid.io.ins_out, 14, 12) @[top.scala 121:35]
    BLU.io.in_func3 <= _BLU_io_in_func3_T @[top.scala 121:17]
    jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 122:20]
    jalrCompMod.io.imm <= ImmgenMod.io.i_imm @[top.scala 123:20]
    node _T_3 = eq(BFU.io.forward_rs1, UInt<1>("h00")) @[top.scala 124:25]
    when _T_3 : @[top.scala 124:40]
      BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 126:17]
      jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 127:22]
      skip @[top.scala 124:40]
    else : @[top.scala 128:47]
      node _T_4 = eq(BFU.io.forward_rs1, UInt<1>("h01")) @[top.scala 128:32]
      when _T_4 : @[top.scala 128:47]
        BLU.io.in_rs1 <= ALUMod.io.output @[top.scala 130:17]
        jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 131:21]
        skip @[top.scala 128:47]
      else : @[top.scala 132:47]
        node _T_5 = eq(BFU.io.forward_rs1, UInt<2>("h02")) @[top.scala 132:32]
        when _T_5 : @[top.scala 132:47]
          BLU.io.in_rs1 <= exemem.io.alu_out @[top.scala 134:17]
          jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 135:22]
          skip @[top.scala 132:47]
        else : @[top.scala 136:47]
          node _T_6 = eq(BFU.io.forward_rs1, UInt<2>("h03")) @[top.scala 136:32]
          when _T_6 : @[top.scala 136:47]
            BLU.io.in_rs1 <= regfileMod.io.WriteData @[top.scala 138:17]
            jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 139:22]
            skip @[top.scala 136:47]
          else : @[top.scala 140:47]
            node _T_7 = eq(BFU.io.forward_rs1, UInt<3>("h04")) @[top.scala 140:32]
            when _T_7 : @[top.scala 140:47]
              BLU.io.in_rs1 <= datamemMod.io.out @[top.scala 142:17]
              jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 143:22]
              skip @[top.scala 140:47]
            else : @[top.scala 144:47]
              node _T_8 = eq(BFU.io.forward_rs1, UInt<3>("h05")) @[top.scala 144:32]
              when _T_8 : @[top.scala 144:47]
                BLU.io.in_rs1 <= regfileMod.io.WriteData @[top.scala 146:16]
                jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 147:22]
                skip @[top.scala 144:47]
              else : @[top.scala 148:46]
                node _T_9 = eq(BFU.io.forward_rs1, UInt<3>("h06")) @[top.scala 148:31]
                when _T_9 : @[top.scala 148:46]
                  jalrCompMod.io.rs1 <= ALUMod.io.output @[top.scala 150:24]
                  BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 151:19]
                  skip @[top.scala 148:46]
                else : @[top.scala 152:47]
                  node _T_10 = eq(BFU.io.forward_rs1, UInt<3>("h07")) @[top.scala 152:32]
                  when _T_10 : @[top.scala 152:47]
                    jalrCompMod.io.rs1 <= exemem.io.alu_out @[top.scala 154:24]
                    BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 155:19]
                    skip @[top.scala 152:47]
                  else : @[top.scala 156:47]
                    node _T_11 = eq(BFU.io.forward_rs1, UInt<4>("h08")) @[top.scala 156:32]
                    when _T_11 : @[top.scala 156:47]
                      jalrCompMod.io.rs1 <= regfileMod.io.WriteData @[top.scala 158:24]
                      BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 159:18]
                      skip @[top.scala 156:47]
                    else : @[top.scala 160:47]
                      node _T_12 = eq(BFU.io.forward_rs1, UInt<4>("h09")) @[top.scala 160:32]
                      when _T_12 : @[top.scala 160:47]
                        jalrCompMod.io.rs1 <= datamemMod.io.out @[top.scala 162:24]
                        BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 163:19]
                        skip @[top.scala 160:47]
                      else : @[top.scala 164:47]
                        node _T_13 = eq(BFU.io.forward_rs1, UInt<4>("h0a")) @[top.scala 164:32]
                        when _T_13 : @[top.scala 164:47]
                          jalrCompMod.io.rs1 <= regfileMod.io.WriteData @[top.scala 166:24]
                          BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 167:19]
                          skip @[top.scala 164:47]
                        else : @[top.scala 168:14]
                          BLU.io.in_rs1 <= regfileMod.io.rdata1 @[top.scala 169:19]
                          jalrCompMod.io.rs1 <= regfileMod.io.rdata1 @[top.scala 170:24]
                          skip @[top.scala 168:14]
    node _T_14 = eq(BFU.io.forward_rs2, UInt<1>("h00")) @[top.scala 173:25]
    when _T_14 : @[top.scala 173:39]
      BLU.io.in_rs2 <= regfileMod.io.rdata2 @[top.scala 175:18]
      skip @[top.scala 173:39]
    else : @[top.scala 176:46]
      node _T_15 = eq(BFU.io.forward_rs2, UInt<1>("h01")) @[top.scala 176:32]
      when _T_15 : @[top.scala 176:46]
        BLU.io.in_rs2 <= ALUMod.io.output @[top.scala 178:18]
        skip @[top.scala 176:46]
      else : @[top.scala 179:46]
        node _T_16 = eq(BFU.io.forward_rs2, UInt<2>("h02")) @[top.scala 179:32]
        when _T_16 : @[top.scala 179:46]
          BLU.io.in_rs2 <= exemem.io.alu_out @[top.scala 181:18]
          skip @[top.scala 179:46]
        else : @[top.scala 182:46]
          node _T_17 = eq(BFU.io.forward_rs2, UInt<2>("h03")) @[top.scala 182:32]
          when _T_17 : @[top.scala 182:46]
            BLU.io.in_rs2 <= regfileMod.io.WriteData @[top.scala 184:18]
            skip @[top.scala 182:46]
          else : @[top.scala 185:46]
            node _T_18 = eq(BFU.io.forward_rs2, UInt<3>("h04")) @[top.scala 185:32]
            when _T_18 : @[top.scala 185:46]
              BLU.io.in_rs2 <= datamemMod.io.out @[top.scala 187:17]
              skip @[top.scala 185:46]
            else : @[top.scala 188:46]
              node _T_19 = eq(BFU.io.forward_rs2, UInt<3>("h05")) @[top.scala 188:32]
              when _T_19 : @[top.scala 188:46]
                BLU.io.in_rs2 <= regfileMod.io.WriteData @[top.scala 190:18]
                skip @[top.scala 188:46]
              else : @[top.scala 192:14]
                BLU.io.in_rs2 <= regfileMod.io.rdata2 @[top.scala 193:20]
                skip @[top.scala 192:14]
    node _T_20 = eq(HD.io.pc_forward, UInt<1>("h01")) @[top.scala 196:23]
    when _T_20 : @[top.scala 196:35]
      PCMod.io.input <= HD.io.pc_out @[top.scala 197:18]
      skip @[top.scala 196:35]
    else : @[top.scala 198:14]
      node _T_21 = eq(CntrlDecMod.io.nextPCsel, UInt<1>("h01")) @[top.scala 199:35]
      when _T_21 : @[top.scala 199:48]
        node _T_22 = eq(BLU.io.output, UInt<1>("h01")) @[top.scala 200:26]
        node _T_23 = eq(CntrlDecMod.io.Branch, UInt<1>("h01")) @[top.scala 200:59]
        node _T_24 = and(_T_22, _T_23) @[top.scala 200:34]
        when _T_24 : @[top.scala 200:68]
          node _PCMod_io_input_T = asUInt(ImmgenMod.io.sb_imm) @[top.scala 201:47]
          PCMod.io.input <= _PCMod_io_input_T @[top.scala 201:24]
          ifid.io.pc <= UInt<1>("h00") @[top.scala 202:20]
          ifid.io.pc4 <= UInt<1>("h00") @[top.scala 203:21]
          ifid.io.ins <= UInt<1>("h00") @[top.scala 204:21]
          skip @[top.scala 200:68]
        else : @[top.scala 205:20]
          PCMod.io.input <= PCMod.io.pc4 @[top.scala 206:24]
          skip @[top.scala 205:20]
        skip @[top.scala 199:48]
      else : @[top.scala 208:50]
        node _T_25 = eq(CntrlDecMod.io.nextPCsel, UInt<1>("h01")) @[top.scala 208:37]
        when _T_25 : @[top.scala 208:50]
          node _PCMod_io_input_T_1 = asUInt(ImmgenMod.io.uj_imm) @[top.scala 209:45]
          PCMod.io.input <= _PCMod_io_input_T_1 @[top.scala 209:22]
          ifid.io.pc <= UInt<1>("h00") @[top.scala 210:18]
          ifid.io.pc4 <= UInt<1>("h00") @[top.scala 211:19]
          ifid.io.ins <= UInt<1>("h00") @[top.scala 212:19]
          skip @[top.scala 208:50]
        else : @[top.scala 213:54]
          node _T_26 = eq(CntrlDecMod.io.nextPCsel, UInt<2>("h03")) @[top.scala 213:41]
          when _T_26 : @[top.scala 213:54]
            node _PCMod_io_input_T_2 = asUInt(jalrCompMod.io.out) @[top.scala 214:46]
            PCMod.io.input <= _PCMod_io_input_T_2 @[top.scala 214:22]
            ifid.io.pc <= UInt<1>("h00") @[top.scala 215:18]
            ifid.io.pc4 <= UInt<1>("h00") @[top.scala 216:19]
            ifid.io.ins <= UInt<1>("h00") @[top.scala 217:19]
            skip @[top.scala 213:54]
          else : @[top.scala 219:18]
            PCMod.io.input <= PCMod.io.pc4 @[top.scala 220:22]
            skip @[top.scala 219:18]
      skip @[top.scala 198:14]
    node _T_27 = eq(HD.io.inst_forward, UInt<1>("h01")) @[top.scala 224:25]
    when _T_27 : @[top.scala 224:37]
      ifid.io.ins <= HD.io.inst_out @[top.scala 225:15]
      ifid.io.pc <= HD.io.current_pc_out @[top.scala 226:14]
      skip @[top.scala 224:37]
    else : @[top.scala 227:14]
      ifid.io.ins <= instmemMod.io.inst @[top.scala 228:17]
      skip @[top.scala 227:14]
    idex.io.pc <= ifid.io.pc_out @[top.scala 237:12]
    idex.io.pc4 <= ifid.io.pc4_out @[top.scala 238:13]
    idex.io.MemWrite <= CntrlDecMod.io.MemWrite @[top.scala 239:17]
    idex.io.Branch <= CntrlDecMod.io.Branch @[top.scala 240:16]
    idex.io.MemRead <= CntrlDecMod.io.MemRead @[top.scala 241:17]
    idex.io.RegWrite <= CntrlDecMod.io.RegWrite @[top.scala 242:18]
    idex.io.MemtoReg <= CntrlDecMod.io.Mem2Reg @[top.scala 243:18]
    idex.io.AluOp <= CntrlDecMod.io.aluop @[top.scala 244:15]
    idex.io.OpA_s <= CntrlDecMod.io.opAsel @[top.scala 245:15]
    idex.io.OpB_s <= CntrlDecMod.io.opBsel @[top.scala 246:15]
    idex.io.NextPc <= CntrlDecMod.io.nextPCsel @[top.scala 247:16]
    node _idex_io_func3_T = bits(ifid.io.ins_out, 14, 12) @[top.scala 248:33]
    idex.io.func3 <= _idex_io_func3_T @[top.scala 248:15]
    node _idex_io_func7_T = bits(ifid.io.ins_out, 30, 30) @[top.scala 249:33]
    idex.io.func7 <= _idex_io_func7_T @[top.scala 249:15]
    idex.io.rs1 <= regfileMod.io.rdata1 @[top.scala 250:13]
    idex.io.rs2 <= regfileMod.io.rdata2 @[top.scala 251:13]
    node _idex_io_rs1_s_T = bits(ifid.io.ins_out, 19, 15) @[top.scala 252:33]
    idex.io.rs1_s <= _idex_io_rs1_s_T @[top.scala 252:15]
    node _idex_io_rs2_s_T = bits(ifid.io.ins_out, 24, 20) @[top.scala 253:33]
    idex.io.rs2_s <= _idex_io_rs2_s_T @[top.scala 253:15]
    node _idex_io_rd_T = bits(ifid.io.ins_out, 11, 7) @[top.scala 254:30]
    idex.io.rd <= _idex_io_rd_T @[top.scala 254:12]
    HD.io.IF_ID_INST <= ifid.io.ins_out @[top.scala 260:18]
    HD.io.ID_EX_MEMREAD <= idex.io.MemRead_out @[top.scala 261:21]
    HD.io.ID_EX_REGRD <= idex.io.rd_out @[top.scala 262:19]
    HD.io.pc_in <= ifid.io.pc4_out @[top.scala 263:13]
    HD.io.current_pc <= ifid.io.pc_out @[top.scala 264:18]
    node _T_28 = eq(idex.io.OpA_s_out, UInt<2>("h02")) @[top.scala 266:25]
    when _T_28 : @[top.scala 266:38]
      node _ALUMod_io_in_A_T = asSInt(idex.io.pc4_out) @[top.scala 267:39]
      ALUMod.io.in_A <= _ALUMod_io_in_A_T @[top.scala 267:20]
      skip @[top.scala 266:38]
    else : @[top.scala 268:15]
      node _T_29 = eq(FU.io.forward_a, UInt<1>("h00")) @[top.scala 269:22]
      when _T_29 : @[top.scala 269:35]
        ALUMod.io.in_A <= idex.io.rs1_out @[top.scala 270:19]
        skip @[top.scala 269:35]
      else : @[top.scala 271:42]
        node _T_30 = eq(FU.io.forward_a, UInt<1>("h01")) @[top.scala 271:29]
        when _T_30 : @[top.scala 271:42]
          ALUMod.io.in_A <= exemem.io.alu_out @[top.scala 272:19]
          skip @[top.scala 271:42]
        else : @[top.scala 273:42]
          node _T_31 = eq(FU.io.forward_a, UInt<2>("h02")) @[top.scala 273:29]
          when _T_31 : @[top.scala 273:42]
            ALUMod.io.in_A <= regfileMod.io.WriteData @[top.scala 274:18]
            skip @[top.scala 273:42]
          else : @[top.scala 275:14]
            ALUMod.io.in_A <= idex.io.rs1_out @[top.scala 276:19]
            skip @[top.scala 275:14]
      skip @[top.scala 268:15]
    node _T_32 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h00")) @[top.scala 280:29]
    when _T_32 : @[top.scala 280:41]
      idex.io.imm <= ImmgenMod.io.i_imm @[top.scala 281:29]
      skip @[top.scala 280:41]
    else : @[top.scala 282:54]
      node _T_33 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h00")) @[top.scala 282:42]
      when _T_33 : @[top.scala 282:54]
        idex.io.imm <= ImmgenMod.io.u_imm @[top.scala 283:29]
        skip @[top.scala 282:54]
      else : @[top.scala 284:54]
        node _T_34 = eq(CntrlDecMod.io.Ex_sel, UInt<1>("h00")) @[top.scala 284:42]
        when _T_34 : @[top.scala 284:54]
          idex.io.imm <= ImmgenMod.io.s_imm @[top.scala 285:29]
          skip @[top.scala 284:54]
        else : @[top.scala 286:20]
          idex.io.imm <= asSInt(UInt<1>("h00")) @[top.scala 286:33]
          skip @[top.scala 286:20]
    ALUMod.io.in_B <= asSInt(UInt<1>("h00")) @[top.scala 288:16]
    node _T_35 = eq(idex.io.OpB_s_out, UInt<1>("h01")) @[top.scala 289:24]
    when _T_35 : @[top.scala 289:32]
      ALUMod.io.in_B <= idex.io.imm_out @[top.scala 290:32]
      node _T_36 = eq(FU.io.forward_b, UInt<1>("h01")) @[top.scala 292:31]
      when _T_36 : @[top.scala 292:43]
        exemem.io.rs2 <= exemem.io.alu_out @[top.scala 292:58]
        skip @[top.scala 292:43]
      else : @[top.scala 293:57]
        node _T_37 = eq(FU.io.forward_b, UInt<2>("h02")) @[top.scala 293:44]
        when _T_37 : @[top.scala 293:57]
          exemem.io.rs2 <= regfileMod.io.WriteData @[top.scala 293:72]
          skip @[top.scala 293:57]
        else : @[top.scala 294:57]
          node _T_38 = eq(FU.io.forward_b, UInt<1>("h00")) @[top.scala 294:44]
          when _T_38 : @[top.scala 294:57]
            exemem.io.rs2 <= idex.io.rs2_out @[top.scala 294:72]
            skip @[top.scala 294:57]
          else : @[top.scala 295:16]
            exemem.io.rs2 <= idex.io.rs2_out @[top.scala 296:31]
            skip @[top.scala 295:16]
      skip @[top.scala 289:32]
    else : @[top.scala 299:19]
      node _T_39 = eq(FU.io.forward_b, UInt<1>("h00")) @[top.scala 300:38]
      when _T_39 : @[top.scala 300:51]
        ALUMod.io.in_B <= idex.io.rs2_out @[top.scala 301:20]
        exemem.io.rs2 <= idex.io.rs2_out @[top.scala 302:18]
        skip @[top.scala 300:51]
      else : @[top.scala 303:44]
        node _T_40 = eq(FU.io.forward_b, UInt<1>("h01")) @[top.scala 303:31]
        when _T_40 : @[top.scala 303:44]
          ALUMod.io.in_B <= exemem.io.alu_out @[top.scala 304:20]
          exemem.io.rs2 <= exemem.io.alu_out @[top.scala 305:19]
          skip @[top.scala 303:44]
        else : @[top.scala 306:44]
          node _T_41 = eq(FU.io.forward_b, UInt<2>("h02")) @[top.scala 306:31]
          when _T_41 : @[top.scala 306:44]
            ALUMod.io.in_B <= regfileMod.io.WriteData @[top.scala 307:20]
            exemem.io.rs2 <= regfileMod.io.WriteData @[top.scala 308:19]
            skip @[top.scala 306:44]
          else : @[top.scala 309:16]
            ALUMod.io.in_B <= idex.io.rs2_out @[top.scala 310:19]
            exemem.io.rs2 <= idex.io.rs2_out @[top.scala 311:19]
            skip @[top.scala 309:16]
      skip @[top.scala 299:19]
    ALUMod.io.aluc <= ALUcMod.io.aluc @[top.scala 315:16]
    exemem.io.MemWrite <= idex.io.MemWrite_out @[top.scala 332:20]
    exemem.io.MemRead <= idex.io.MemRead_out @[top.scala 333:19]
    exemem.io.RegWrite <= idex.io.RegWrite_out @[top.scala 335:20]
    exemem.io.MemtoReg <= idex.io.MemtoReg_out @[top.scala 336:20]
    exemem.io.rs2 <= idex.io.rs2_out @[top.scala 337:15]
    exemem.io.alu <= ALUMod.io.output @[top.scala 338:15]
    exemem.io.rd <= idex.io.rd_out @[top.scala 339:14]
    node _datamemMod_io_Addr_T = bits(exemem.io.alu_out, 9, 2) @[top.scala 361:41]
    datamemMod.io.Addr <= _datamemMod_io_Addr_T @[top.scala 361:20]
    datamemMod.io.Data <= exemem.io.rs2_out @[top.scala 362:20]
    datamemMod.io.MemWrite <= exemem.io.MemWrite_out @[top.scala 363:24]
    datamemMod.io.MemRead <= exemem.io.MemRead @[top.scala 364:23]
    memwb.io.RegWrite <= exemem.io.RegWrite_out @[top.scala 366:19]
    memwb.io.MemtoReg <= exemem.io.MemtoReg_out @[top.scala 367:19]
    memwb.io.MemRead <= exemem.io.MemRead_out @[top.scala 368:18]
    memwb.io.mem <= datamemMod.io.out @[top.scala 369:14]
    memwb.io.alu <= exemem.io.alu_out @[top.scala 370:14]
    memwb.io.rd <= exemem.io.rd_out @[top.scala 371:13]
    node _regfileMod_io_WriteData_T = eq(memwb.io.MemtoReg_out, UInt<1>("h00")) @[top.scala 377:24]
    node _regfileMod_io_WriteData_T_1 = eq(memwb.io.MemtoReg_out, UInt<1>("h01")) @[top.scala 378:24]
    node _regfileMod_io_WriteData_T_2 = mux(_regfileMod_io_WriteData_T_1, memwb.io.mem_out, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _regfileMod_io_WriteData_T_3 = mux(_regfileMod_io_WriteData_T, memwb.io.alu_out, _regfileMod_io_WriteData_T_2) @[Mux.scala 98:16]
    regfileMod.io.WriteData <= _regfileMod_io_WriteData_T_3 @[top.scala 376:25]
    regfileMod.io.RegWrite <= memwb.io.RegWrite_out @[top.scala 380:24]
    regfileMod.io.rd <= memwb.io.rd_out @[top.scala 381:18]
    io.out <= UInt<1>("h00") @[top.scala 382:8]
    
